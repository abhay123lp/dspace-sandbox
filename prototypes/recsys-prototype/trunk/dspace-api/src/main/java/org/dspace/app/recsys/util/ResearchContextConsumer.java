package org.dspace.app.recsys.util;

import org.dspace.event.Consumer;
import org.dspace.event.Event;
import org.dspace.core.Context;
import org.dspace.core.ConfigurationManager;
import org.dspace.eperson.EPerson;
import org.dspace.app.recsys.researchContext.ResearchContext;
import org.dspace.app.recsys.researchContext.dao.ResearchContextDAO;
import org.dspace.app.recsys.researchContext.dao.ResearchContextDAOFactory;
import org.dspace.storage.rdbms.TableRow;
import org.dspace.storage.rdbms.DatabaseManager;
import org.apache.log4j.Logger;

/**
 * @author Desmond Elliott
 *
 * <code>ResearchContextConsumer</code> listens for <code>EPerson+Create</code>
 * events and creates
 * a new <code>ResearchContext</code> for a newly created <code>EPerson</code>.
 * It also listens for
 * <code>EPerson+Delete</code> events and removes <code>ResearchContexts</code>
 * and their associated
 * tables.
 */

public class ResearchContextConsumer implements Consumer
{

    private static Logger log = Logger.getLogger(ResearchContextConsumer.class);

    /**
     * If the Event type is a CREATE event, add a new ResearchContext object
     * for the recently created EPerson. If the Event type is a DELETE event,
     * remove all the Research Context related rows from the database related to
     * this EPerson.
     * 
     * @param context Context used to gain database access
     * @param event the event generated by the system
     * @throws Exception most likely an SQLException
     */
    public void consume(Context context, Event event) throws Exception
    {
        EPerson e = context.getCurrentUser();
        if (event.getEventType() == Event.CREATE)
        {
            ResearchContextDAO dao =
                    ResearchContextDAOFactory.getInstance(context);

            String uri = ConfigurationManager.getProperty("dspace.url") +
                          "/atom/essence";
            
            ResearchContext researchContext = dao.create(uri);
            researchContext.setEperson(e);
            researchContext.setName("Initial Context");

            dao.update(researchContext);

            TableRow row = DatabaseManager.create(context, "quambo_eperson");
            row.setColumn("eperson_id", e.getID());
            row.setColumn("initial_research_context_uuid",
                          researchContext.getUUID().toString());

            row.setColumn("last_research_context_uuid",
                          researchContext.getUUID().toString());

            DatabaseManager.update(context, row);

            context.commit();
            return;
        }
        if (event.getEventType() == Event.DELETE)
        {
            //TODO: WRITE THIS
        }
    }

    /*
     * These methods are required by the interface but have no body
     */

    /** @inheritDoc */
    public void initialize() throws Exception
    {
    }

    /** @inheritDoc */
    public void end(Context ctx) throws Exception
    {
    }
    
    /** @inheritDoc */
    public void finish(Context ctx) throws Exception
    {
    }
}
